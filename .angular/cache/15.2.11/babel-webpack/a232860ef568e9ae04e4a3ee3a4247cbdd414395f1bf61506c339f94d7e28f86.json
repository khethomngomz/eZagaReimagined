{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport let EqualValidator = /*#__PURE__*/(() => {\n  class EqualValidator {\n    validateEqual;\n    reverse;\n    constructor(validateEqual, reverse) {\n      this.validateEqual = validateEqual;\n      this.reverse = reverse;\n    }\n    get isReverse() {\n      if (!this.reverse) return false;\n      return this.reverse === 'true' ? true : false;\n    }\n    validate(c) {\n      // self value\n      let v = c.value;\n      // control vlaue\n      let e = c.root.get(this.validateEqual);\n      // value not equal\n      if (e && v !== e.value && !this.isReverse) {\n        return {\n          validateEqual: false\n        };\n      }\n      // value equal and reverse\n      if (e && v === e.value && this.isReverse) {\n        delete e.errors['validateEqual'];\n        if (!Object.keys(e.errors).length) e.setErrors(null);\n      }\n      // value not equal and reverse\n      if (e && v !== e.value && this.isReverse) {\n        e.setErrors({\n          validateEqual: false\n        });\n      }\n      return null;\n    }\n    static ɵfac = function EqualValidator_Factory(t) {\n      return new (t || EqualValidator)(i0.ɵɵinjectAttribute('validateEqual'), i0.ɵɵinjectAttribute('reverse'));\n    };\n    static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: EqualValidator,\n      selectors: [[\"\", \"validateEqual\", \"\", \"formControlName\", \"\"], [\"\", \"validateEqual\", \"\", \"formControl\", \"\"], [\"\", \"validateEqual\", \"\", \"ngModel\", \"\"]],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => EqualValidator),\n        multi: true\n      }])]\n    });\n  }\n  return EqualValidator;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}